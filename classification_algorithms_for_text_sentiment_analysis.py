# -*- coding: utf-8 -*-
"""Classification Algorithms for Text Sentiment Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wAveiFI-2G_N_s5ehx32Xpmqwy23MDMf
"""

import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import MultinomialNB
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

# Step 1: Load the datasets
train_data = pd.read_csv('train.csv')
test_data = pd.read_csv('test.csv')

# Step 2: Preprocess the data (assuming basic preprocessing)
train_data['processed_text'] = train_data['text'].str.lower()
test_data['processed_text'] = test_data['text'].str.lower()

# Step 3: Feature extraction using various methods (BoW, TF-IDF, embeddings, etc.)
# Option 1: Bag-of-Words (BoW) vectors
vectorizer = CountVectorizer()
X_train_bow = vectorizer.fit_transform(train_data['processed_text'])
X_test_bow = vectorizer.transform(test_data['processed_text'])

# Option 2: TF-IDF vectors
vectorizer = TfidfVectorizer()
X_train_tfidf = vectorizer.fit_transform(train_data['processed_text'])
X_test_tfidf = vectorizer.transform(test_data['processed_text'])

# Uncomment for Option 3: Word embeddings
# X_train = # Extract word embeddings for train_data
# X_test = # Extract word embeddings for test_data

y_train = train_data['label']

# Step 4: Split the data into training and validation sets
X_train_bow, X_val_bow, X_train_tfidf, X_val_tfidf, y_train, y_val = train_test_split(
    X_train_bow, X_train_tfidf, y_train, test_size=0.2, random_state=42
)

# Step 5: Train classifiers (Logistic Regression, Naive Bayes, SVM, etc.)
# Option 1: Logistic Regression
classifier_lr = LogisticRegression(max_iter=50)
classifier_lr.fit(X_train_bow, y_train)
y_pred_lr = classifier_lr.predict(X_val_bow)
accuracy_lr = accuracy_score(y_val, y_pred_lr)
print('Logistic Regression (BoW) Accuracy:', accuracy_lr)

classifier_lr_tfidf = LogisticRegression(max_iter=50)
classifier_lr_tfidf.fit(X_train_tfidf, y_train)
y_pred_lr_tfidf = classifier_lr_tfidf.predict(X_val_tfidf)
accuracy_lr_tfidf = accuracy_score(y_val, y_pred_lr_tfidf)
print('Logistic Regression (TF-IDF) Accuracy:', accuracy_lr_tfidf)

# Option 2: Naive Bayes Classifier
classifier_nb = MultinomialNB()
classifier_nb.fit(X_train_bow, y_train)
y_pred_nb = classifier_nb.predict(X_val_bow)
accuracy_nb = accuracy_score(y_val, y_pred_nb)
print('Naive Bayes (BoW) Accuracy:', accuracy_nb)

classifier_nb_tfidf = MultinomialNB()
classifier_nb_tfidf.fit(X_train_tfidf, y_train)
y_pred_nb_tfidf = classifier_nb_tfidf.predict(X_val_tfidf)
accuracy_nb_tfidf = accuracy_score(y_val, y_pred_nb_tfidf)
print('Naive Bayes (TF-IDF) Accuracy:', accuracy_nb_tfidf)

# Option 3: SVM Classifier
classifier_svm = SVC(max_iter=50)
classifier_svm.fit(X_train_bow, y_train)
y_pred_svm = classifier_svm.predict(X_val_bow)
accuracy_svm = accuracy_score(y_val, y_pred_svm)
print('SVM (BoW) Accuracy:', accuracy_svm)

classifier_svm_tfidf = SVC(max_iter=50)
classifier_svm_tfidf.fit(X_train_tfidf, y_train)
y_pred_svm_tfidf = classifier_svm_tfidf.predict(X_val_tfidf)
accuracy_svm_tfidf = accuracy_score(y_val, y_pred_svm_tfidf)
print('SVM (TF-IDF) Accuracy:', accuracy_svm_tfidf)

# Step 6: Make predictions on the test set
test_predictions_lr = classifier_lr.predict(X_test_bow)
test_predictions_lr_tfidf = classifier_lr_tfidf.predict(X_test_tfidf)
test_predictions_nb = classifier_nb.predict(X_test_bow)
test_predictions_nb_tfidf = classifier_nb_tfidf.predict(X_test_tfidf)
test_predictions_svm = classifier_svm.predict(X_test_bow)
test_predictions_svm_tfidf = classifier_svm_tfidf.predict(X_test_tfidf)